services:
  tg-bot:
    build:
      context: .
      dockerfile: ./Dockerfile
      target: tg-bot
    networks:
      - shgpu-table-dev
    deploy:
      restart_policy:
        condition: on-failure
        delay: 30s
        max_attempts: 30
    depends_on:
      gateway:
        condition: service_started
    env_file:
      - ./.env.docker
  migrations:
    build:
      context: .
      dockerfile: ./Dockerfile
      target: migrations
    networks:
      - shgpu-table-dev
    depends_on:
      postgres:
        condition: service_started
    deploy:
      restart_policy:
        condition: on-failure
        delay: 30s
        max_attempts: 30
    env_file:
      - ./.env.docker
  gateway:
    build:
      context: .
      dockerfile: ./Dockerfile
      target: gateway
#    secrets:
#      - shgpu-table_doppler_token
    networks:
      - shgpu-table-dev
    deploy:
      restart_policy:
        condition: on-failure
        delay: 30s
        max_attempts: 30
    depends_on:
      migrations:
        condition: service_completed_successfully
    env_file:
      - ./.env.docker
  admin:
    build:
      context: .
      dockerfile: ./Dockerfile
      target: admin
    networks:
      - shgpu-table-dev
    deploy:
      restart_policy:
        condition: on-failure
        delay: 30s
        max_attempts: 30
    depends_on:
      postgres:
        condition: service_started
    env_file:
      - ./.env.docker

  watcher:
    build:
      context: .
      dockerfile: ./Dockerfile
      target: watcher
    networks:
      - shgpu-table-dev
    depends_on:
      migrations:
        condition: service_completed_successfully
      parser:
        condition: service_started
    env_file:
      - ./.env.docker
    deploy:
      restart_policy:
        condition: on-failure
        delay: 30s
        max_attempts: 30
  parser:
    build:
      context: .
      dockerfile: ./Dockerfile
      target: parser
    networks:
      - shgpu-table-dev
    depends_on:
      migrations:
        condition: service_completed_successfully
    env_file:
      - ./.env.docker
    deploy:
      restart_policy:
        condition: on-failure
        delay: 30s
        max_attempts: 30
  bot-postgres:
    container_name: bot-postgres
    image: postgres:latest
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=shgpu_table_bot
    env_file:
      - ./.env.docker
    ports:
      - 5433:5433
    command: -p 5433
    volumes:
      - bot-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d shgpu_table_bot"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 512MB
    networks:
      - shgpu-table-dev
  postgres:
    container_name: postgres
    image: postgres:latest
    volumes:
      - ./scripts:/docker-entrypoint-initdb.d
      - mainbase-postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=admin
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d shgpu_table"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 512MB
    networks:
      - shgpu-table-dev
  adminer:
    image: adminer
    restart: always
    ports:
      - "8085:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres:5432
      - ADMINER_PLUGINS=enum-types enum-option json-column
    networks:
      - shgpu-table-dev
  redis:
    restart: unless-stopped
    image: redis/redis-stack:latest
    #    volumes:
    #      - redis-data:/data
    networks:
      - shgpu-table-dev
    ports:
      - 6379:6379
networks:
  shgpu-table-dev:
    driver: bridge

volumes:
  mainbase-postgres-data:
  bot-postgres-data: